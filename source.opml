<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- OPML generated by OPML Editor v10.1b19 on Mon, 12 Aug 2024 16:07:33 GMT -->

<!-- 
   Hi this is Dave Winer. I write all my project code in an outliner, which 
   generates all the files that make up this GitHub project. You'll see a 
   source.opml file like this in each of my projects. It contains the outline 
   source that the repo files were generated from. This is the most logical place 
   to store them. You can read the code in any outliner that supports OPML, which 
   includes https://drummer.land. You can use the Open URL command in 
   Drummer's File menu to open the "raw" version of this file straight from the 
   GitHub repo.
 -->

<opml version="2.0">
	<head>
		<title>nodeEditor: scriptingNightlyEmail</title>
		<dateCreated>Tue, 20 Aug 2019 13:27:39 GMT</dateCreated>
		<dateModified>Mon, 12 Aug 2024 16:07:33 GMT</dateModified>
		<ownerName>Dave Winer</ownerName>
		<ownerId>http://davewiner.com/</ownerId>
		<expansionState>1, 2, 3, 15</expansionState>
		<vertScrollState>1</vertScrollState>
		<windowTop>72</windowTop>
		<windowLeft>437</windowLeft>
		<windowBottom>1171</windowBottom>
		<windowRight>1814</windowRight>
		</head>
	<body>
		<outline text="/scripting.com/code/scriptingnightlyemail/">
			<outline text="worknotes.md" created="Wed, 19 Apr 2023 02:57:26 GMT">
				<outline text="#### 8/12/24; 11:26:40 AM by DW" created="Mon, 12 Aug 2024 15:26:39 GMT">
					<outline text="Considered moving the email signup page to subscribe.scripting.com, but the function is too complicated to be quickly converted to https." created="Mon, 12 Aug 2024 15:26:41 GMT"/>
					<outline text="That's the problem, the idea is simple, but in order to make such a big change, you have to completely refamiliarize yourself with the system, and be prepared for an even longer period to debug the change because you're not familiar with how it's put together. It's virtually certain to require a day of debugging." created="Mon, 12 Aug 2024 15:44:02 GMT"/>
					</outline>
				<outline text="#### 4/18/23 by DW" created="Wed, 19 Apr 2023 02:57:28 GMT">
					<outline text="Switching from Radio3-based linkblog to FeedLand-based linkblog. " created="Wed, 19 Apr 2023 02:57:29 GMT"/>
					</outline>
				</outline>
			<outline text="emailtemplate.html">
				<outline text="&lt;html&gt;">
					<outline text="&lt;head&gt;">
						<outline text="&lt;title&gt;[%title%]&lt;/title&gt;"/>
						<outline text="&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;"/>
						<outline text="&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;"/>
						<outline text="&lt;style&gt;">
							<outline text="body {">
								<outline text="}"/>
								</outline>
							<outline text=".divPageBody {">
								<outline text="margin-bottom: 400px;"/>
								<outline text="color: black;"/>
								<outline text="}"/>
								</outline>
							<outline text=".divDayContainer {">
								<outline text="font-family: &quot;Arial&quot;;"/>
								<outline text="font-size: 18px;"/>
								<outline text="color: black;"/>
								<outline text="line-height: 150%;"/>
								<outline text="width: 85%;"/>
								<outline text="margin-left: auto;"/>
								<outline text="margin-right: auto;"/>
								<outline text="background-color: white;"/>
								<outline text="padding: 25px;"/>
								<outline text="padding-bottom: 10px;"/>
								<outline text="border: 1px solid silver;"/>
								<outline text="}"/>
								</outline>
							<outline text=".divDayContainer a {">
								<outline text="color: #0088CC;"/>
								<outline text="text-decoration: none;"/>
								<outline text="}"/>
								</outline>
							<outline text=".divDayTitle {">
								<outline text="font-family: &quot;Arial&quot;;"/>
								<outline text="font-size: 28px;"/>
								<outline text="font-weight: bold;"/>
								<outline text="margin-bottom: 25px;"/>
								<outline text="letter-spacing: -1px;"/>
								<outline text="}"/>
								</outline>
							<outline text=".divDayTitle a {">
								<outline text="color: black;"/>
								<outline text="}"/>
								</outline>
							<outline text=".divSingularItem {">
								<outline text="font-size: 18px;"/>
								<outline text="margin-bottom: .6em;"/>
								<outline text="}"/>
								</outline>
							<outline text=".spPermaLink {">
								<outline text="margin-left: 5px;"/>
								<outline text="margin-right: 8px;"/>
								<outline text="}"/>
								</outline>
							<outline text=".spPermaLink a {">
								<outline text="font-family: &quot;Arial&quot;;"/>
								<outline text="color: purple;"/>
								<outline text="opacity: 0.2;"/>
								<outline text="font-weight: normal;"/>
								<outline text="font-size: 14px;"/>
								<outline text="cursor: pointer;"/>
								<outline text="}"/>
								</outline>
							<outline text=".divTitledItem .divTitle {">
								<outline text="font-family: &quot;Arial&quot;;"/>
								<outline text="font-size: 22px;"/>
								<outline text="margin-top: 20px;"/>
								<outline text="margin-bottom: .1em;"/>
								<outline text="font-weight: bold;"/>
								<outline text="line-height: 140%;"/>
								<outline text="letter-spacing: -1px;"/>
								<outline text="}"/>
								</outline>
							<outline text=".divTitledItem .divTitle a {">
								<outline text="color: black;"/>
								<outline text="}"/>
								</outline>
							<outline text=".divTitledItem ul {">
								<outline text="margin-left: 0;"/>
								<outline text="padding-inline-start: 0 !important;"/>
								<outline text="margin-block-start: 0;"/>
								<outline text="}"/>
								</outline>
							<outline text=".divTitledItem li {">
								<outline text="font-size: 18px;"/>
								<outline text="list-style-type: none;"/>
								<outline text="margin-bottom: .6em;"/>
								<outline text="line-height: 150%;"/>
								<outline text="}"/>
								</outline>
							<outline text=".divPgf {">
								<outline text="margin-bottom: .6em;"/>
								<outline text="line-height: 150%;"/>
								<outline text="}"/>
								</outline>
							<outline text=".divLinkblog {">
								<outline text="font-family: &quot;Arial&quot;;"/>
								<outline text="font-size: 18px;"/>
								<outline text="margin-top: 75px;"/>
								<outline text="border-top: 1px solid silver;" created="Fri, 07 Mar 2014 17:08:19 GMT" pgfnum="38600"/>
								<outline text="padding-top: 5px;" isComment="true"/>
								<outline text="width: 75%;" isComment="true"/>
								<outline text="margin-left: auto;" isComment="true"/>
								<outline text="margin-right: auto;" isComment="true"/>
								<outline text="line-height: 130%;"/>
								<outline text="}"/>
								</outline>
							<outline text=".divLinkblog h4 {">
								<outline text="margin-block-start: 10px;"/>
								<outline text="margin-block-start: 10px;"/>
								<outline text="margin-block-end: 10px;"/>
								<outline text="}"/>
								</outline>
							<outline text=".divLinkblog h4 a {">
								<outline text="color: inherit;"/>
								<outline text="}"/>
								</outline>
							<outline text=".divLinkblogItem { ">
								<outline text="margin-bottom: 10px;"/>
								<outline text="line-height: 120%;"/>
								<outline text="}"/>
								</outline>
							<outline text=".divFooter {" created="Fri, 07 Mar 2014 17:07:49 GMT" pgfnum="38596">
								<outline text="font-family: &quot;Arial&quot;;"/>
								<outline text="font-size: 15px;"/>
								<outline text="color: black;"/>
								<outline text="text-align: center;" created="Fri, 07 Mar 2014 17:10:00 GMT" pgfnum="38601"/>
								<outline text="margin-top: 75px;"/>
								<outline text="border-top: 1px solid silver;" created="Fri, 07 Mar 2014 17:08:19 GMT" pgfnum="38600"/>
								<outline text="padding-top: 5px;"/>
								<outline text="}" created="Fri, 07 Mar 2014 17:07:51 GMT" pgfnum="38597"/>
								</outline>
							<outline text=".divInlineImage {">
								<outline text="padding: 10px;"/>
								<outline text="padding-left: 15px;"/>
								<outline text="padding-right: 15px;"/>
								<outline text="border: 1px dashed silver;"/>
								<outline text="font-size: 0.8em;"/>
								<outline text="line-height: 130%;"/>
								<outline text="text-align: center;"/>
								<outline text="}"/>
								</outline>
							<outline text=".imgInline {">
								<outline text="margin-bottom: 10px;"/>
								<outline text="}"/>
								</outline>
							<outline text=".spSpoiler {">
								<outline text="display: none;"/>
								<outline text="}"/>
								</outline>
							<outline text="&lt;/style&gt;"/>
							</outline>
						<outline text="&lt;/head&gt;"/>
						</outline>
					<outline text="&lt;body&gt;">
						<outline text="&lt;div class=&quot;divPageBody&quot;&gt;">
							<outline text="&lt;div class=&quot;divDayContainer&quot;&gt;">
								<outline text="[%text%]"/>
								<outline text="&lt;div class=&quot;divLinkblog&quot;&gt;">
									<outline text="[%linkblogtext%]"/>
									<outline text="&lt;/div&gt;"/>
									</outline>
								<outline text="&lt;div class=&quot;divFooter&quot;&gt;">
									<outline text="[%copyright%]&lt;br&gt;"/>
									<outline text="This email was sent on: [%whenSent%] Eastern.&lt;br&gt;"/>
									<outline text="&quot;[%snarkySlogan%]&quot;&lt;br&gt;"/>
									<outline text="[%howLongBlogRunning%]&lt;br&gt;"/>
									<outline text="How to &lt;a href=&quot;http://scripting.com/email/&quot;&gt;subscribe&lt;/a&gt;. Read on &lt;a href=&quot;[%readOnWebUrl%]&quot;&gt;the web&lt;/a&gt;. Click &lt;a href=&quot;[%unsubUrl%]&quot;&gt;here&lt;/a&gt; to unsubscribe."/>
									<outline text="&lt;/div&gt;"/>
									</outline>
								<outline text="&lt;/div&gt;"/>
								</outline>
							<outline text="&lt;/div&gt;"/>
							</outline>
						<outline text="&lt;script&gt;">
							<outline text="$(document).ready (function () {">
								<outline text="startup ();" created="Wed, 30 Oct 2013 15:20:06 GMT" pgfnum="30656"/>
								<outline text="});"/>
								</outline>
							<outline text="&lt;/script&gt;"/>
							</outline>
						<outline text="&lt;/body&gt;"/>
						</outline>
					<outline text="&lt;/html&gt;"/>
					</outline>
				</outline>
			<outline text="package.json">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;scriptingnightlyemail&quot;, "/>
					<outline text="&quot;description&quot;: &quot;This runs every night at midnight, gathers the new items from the Scripting News feed and adds them to a new feed that has one item per day. Originally this feed was designed to be hooked into a mail distributor like Mailchimp, but I decided to write my own mail distributor.&quot;,"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave@smallpicture.com&gt;&quot;,"/>
					<outline text="&quot;license&quot;: &quot;MIT&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.4.11&quot;,"/>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;daveutils&quot;: &quot;*&quot;,"/>
						<outline text="&quot;daverss&quot;: &quot;*&quot;,"/>
						<outline text="&quot;daves3&quot;: &quot;*&quot;,"/>
						<outline text="&quot;davemail&quot;: &quot;*&quot;,"/>
						<outline text="&quot;davefeedread&quot;: &quot;*&quot;,"/>
						<outline text="&quot;dateformat&quot;: &quot;*&quot;,"/>
						<outline text="&quot;davehttp&quot;: &quot;*&quot;," isComment="true"/>
						<outline text="&quot;querystring&quot;: &quot;*&quot;," isComment="true"/>
						<outline text="&quot;request&quot;: &quot;*&quot;"/>
						<outline text="} "/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="scriptingnightlyemail.js">
				<outline text="var myVersion = &quot;0.4.11&quot;, myProductName = &quot;scriptingNightlyEmail&quot;; " created="Mon, 03 Feb 2014 03:21:03 GMT" pgfnum="36831"/>
				<outline text=""/>
				<outline text="Notes" isComment="true">
					<outline text="12/31/23; 10:03:14 PM by DW" created="Mon, 01 Jan 2024 03:03:13 GMT">
						<outline text="Changed the year in the copyright message from 2023 to 2024." created="Mon, 01 Jan 2024 03:03:18 GMT"/>
						</outline>
					<outline text="1/13/23; 8:08:16 AM by DW" created="Fri, 13 Jan 2023 13:08:16 GMT">
						<outline text="If a linkblog item doesn't have a link, we would crash, trying to parse the link." created="Fri, 13 Jan 2023 13:08:17 GMT"/>
						</outline>
					<outline text="2/4/20; 11:33:36 AM by DW">
						<outline text="Instead of getting the text of the daily posts from GitHub, get them from a special location on S3."/>
						</outline>
					<outline text="1/15/20; 12:15:30 PM by DW">
						<outline text="Changed the year in the copyright message from 2019 to 2020."/>
						</outline>
					<outline text="8/20/19; 1:38:43 PM by DW">
						<outline text="Added initial round of test users."/>
						</outline>
					<outline text="8/8/19; 10:31:15 AM by DW">
						<outline text="Moving &lt;a href=&quot;http://scripting.com/2019/08/08.html#a143201&quot;&gt;away&lt;/a&gt; from MailChimp. "/>
						<outline text="First step, send an email to myself every night with the contents of Scripting News. "/>
						</outline>
					</outline>
				<outline text="" isComment="true"/>
				<outline text="const utils = require (&quot;daveutils&quot;);"/>
				<outline text="const rss = require (&quot;daverss&quot;);"/>
				<outline text="const mail = require (&quot;./lib/sendmail.js&quot;);" isComment="true"/>
				<outline text="const mail = require (&quot;davemail&quot;);"/>
				<outline text="const dateFormat = require (&quot;dateformat&quot;);"/>
				<outline text="const s3 = require (&quot;daves3&quot;);"/>
				<outline text="const qs = require (&quot;querystring&quot;);" isComment="true"/>
				<outline text="const davehttp = require (&quot;davehttp&quot;); " isComment="true"/>
				<outline text="const request = require (&quot;request&quot;);"/>
				<outline text="const feedRead = require (&quot;davefeedread&quot;);"/>
				<outline text="const urlParser = require (&quot;url&quot;);"/>
				<outline text="const fs = require (&quot;fs&quot;);"/>
				<outline text=""/>
				<outline text="var config = { ">
					<outline text="urlGitHubPath: &quot;https://raw.githubusercontent.com/scripting/Scripting-News/master/blog/pages/&quot;,"/>
					<outline text="pathDestRssFile: &quot;/scripting.com/rssNightly.xml&quot;,"/>
					<outline text="pathDestJsonFile: &quot;/scripting.com/rssNightly.json&quot;,"/>
					<outline text="fnameFeedJson: &quot;rss.json&quot;,"/>
					<outline text="userPrefsFolder: &quot;data/&quot;, //8/18/19 by DW"/>
					<outline text=""/>
					<outline text="urlLinkblogFeed: &quot;http://data.feedland.org/feeds/davewiner.xml&quot;, //4/18/23 by DW"/>
					<outline text="urlLinkblogFeed: &quot;http://radio3.io/users/davewiner/rss.xml&quot;, //8/23/19 by DW" isComment="true"/>
					<outline text="feedReadTimeOutSecs: 30, //8/23/19 by DW"/>
					<outline text=""/>
					<outline text="emailPrefsFile: &quot;../scriptingmaillist/data/emailPrefs.json&quot;, //8/28/19 by DW"/>
					<outline text="emailPrefsFile: &quot;../nodelikes/data/emailPrefs.json&quot;, //8/19/19 by DW" isComment="true"/>
					<outline text="emailUnsubUrl: &quot;http://scripting.com/email/?unsub=true&amp;email=[%email%]&quot;, //8/28/19 by DW"/>
					<outline text="emailUnsubUrl: &quot;http://maillist.scripting.com/confirmemail?email=[%email%]&amp;subscribe=false&amp;urlwebapp=http://maillist.scripting.com/&quot;, //8/27/19 by DW" isComment="true"/>
					<outline text="emailUnsubUrl: &quot;http://scripting.com/email/?unsub=true&quot;, //8/20/19 by DW" isComment="true"/>
					<outline text="emailCopyright: &quot;Copyright 1994-2024 Dave Winer.&quot;, //1/5/22 by DW"/>
					<outline text=""/>
					<outline text="dataFilePath: &quot;data/&quot;,"/>
					<outline text="timeOutSecs: 30,"/>
					<outline text="userAgent: myProductName + &quot; v&quot; + myVersion,"/>
					<outline text="blogTitle: &quot;Scripting News&quot;,"/>
					<outline text="rssTitle: &quot;Scripting News for email&quot;,"/>
					<outline text="rssLink: &quot;http://scripting.com/&quot;,"/>
					<outline text="rssItemAuthor: &quot;dave.winer@gmail.com (Dave Winer)&quot;,"/>
					<outline text="rssDescription: &quot;A feed containing one item per day with all the posts on Scripting News for that day.&quot;,"/>
					<outline text="rssLanguage: &quot;en-us&quot;,"/>
					<outline text="rssGenerator: myProductName + &quot; v&quot; + myVersion,"/>
					<outline text="rssDocs: &quot;http://cyber.law.harvard.edu/rss/rss.html&quot;,"/>
					<outline text="rssMaxItems: 50,"/>
					<outline text="appDomain: &quot;scripting.com&quot;,"/>
					<outline text="flRssCloudEnabled:  true,"/>
					<outline text="rssCloudDomain:  &quot;rpc.rsscloud.io&quot;,"/>
					<outline text="rssCloudPort:  5337,"/>
					<outline text="rssCloudPath: &quot;/pleaseNotify&quot;,"/>
					<outline text="rssCloudRegisterProcedure:  &quot;&quot;,"/>
					<outline text="rssCloudProtocol:  &quot;http-post&quot;"/>
					<outline text="};"/>
					</outline>
				<outline text="var stats = {">
					<outline text="whenLastCheck: new Date (0),"/>
					<outline text="ctChecks: 0,"/>
					<outline text="whenLastUpdate: new Date (0),"/>
					<outline text="ctUploads: 0,"/>
					<outline text="whenLastUpload: new Date (0),"/>
					<outline text="ctUpdates: 0,"/>
					<outline text="ctUploadErrors: 0,"/>
					<outline text="ctConsecutiveUploadErrors: 0,"/>
					<outline text="whenLastUploadError: new Date (0),"/>
					<outline text="whenLastSave: new Date (0),"/>
					<outline text="ctSaves: 0,"/>
					<outline text="rssHistory: [],"/>
					<outline text="};"/>
					</outline>
				<outline text="var mailStats = {">
					<outline text="ctSaves: 0,"/>
					<outline text="whenLastSave: new Date (0),"/>
					<outline text="ctEmailsSent: 0,"/>
					<outline text="people: {">
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="const fnameStats = &quot;stats.json&quot;, fnameConfig = &quot;config.json&quot;, fnameRss = &quot;rss.xml&quot;, fnameJson = &quot;rss.json&quot;, fnameMailStats = &quot;mailStats.json&quot;;"/>
				<outline text="var flStatsChanged = false, flRssChanged = false, flMailStatsChanged = false;"/>
				<outline text="var currentHour = new Date ().getHours ();"/>
				<outline text="var emailTemplateFile = &quot;emailtemplate.html&quot;;"/>
				<outline text=""/>
				<outline text="function mailStatsChanged () {">
					<outline text="flMailStatsChanged = true;"/>
					<outline text="}"/>
					</outline>
				<outline text="function logMailSend (email) {">
					<outline text="var now = new Date ();"/>
					<outline text="var obj = {">
						<outline text="ct: 0,"/>
						<outline text="whenFirst: now,"/>
						<outline text="whenLast: now"/>
						<outline text="};"/>
						</outline>
					<outline text="var jstruct = mailStats.people [email];"/>
					<outline text="if (jstruct !== undefined) {">
						<outline text="for (var x in jstruct) {">
							<outline text="obj [x] = jstruct [x];"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="obj.whenLast = now;"/>
					<outline text="obj.ct++;"/>
					<outline text="mailStats.people [email] = obj;"/>
					<outline text="mailStats.ctEmailsSent++;"/>
					<outline text="mailStatsChanged ();"/>
					<outline text="}"/>
					</outline>
				<outline text="function getLinkblogTextForTheDay (theDay, callback) {">
					<outline text="Changes" isComment="true" created="Wed, 19 Apr 2023 02:55:09 GMT">
						<outline text="4/18/23; 10:55:12 PM by DW" created="Wed, 19 Apr 2023 02:55:11 GMT">
							<outline text="Add code to process linkblog coming from FeedLand, not Radio3. " created="Wed, 19 Apr 2023 02:55:12 GMT"/>
							</outline>
						</outline>
					<outline text="function getDomainFromUrl (url) {">
						<outline text="var parsedUrl = urlParser.parse (url);"/>
						<outline text="var s = parsedUrl.hostname;"/>
						<outline text="var ct = utils.stringCountFields (s, &quot;.&quot;);"/>
						<outline text="if (ct &gt;= 3) {">
							<outline text="s = utils.stringNthField (s, &quot;.&quot;, ct - 1) + &quot;.&quot; + utils.stringNthField (s, &quot;.&quot;, ct);"/>
							<outline text="}"/>
							</outline>
						<outline text="return (s);"/>
						<outline text="}"/>
						</outline>
					<outline text="function cleanDescription (desc) { //4/18/23 by DW" created="Wed, 19 Apr 2023 02:35:15 GMT">
						<outline text="if (utils.beginsWith (desc, &quot;&lt;p&gt;&quot;)) {" created="Wed, 19 Apr 2023 02:35:25 GMT">
							<outline text="desc = utils.stringDelete (desc, 1, 3);" created="Wed, 19 Apr 2023 02:35:49 GMT"/>
							<outline text="}" created="Wed, 19 Apr 2023 02:35:45 GMT"/>
							</outline>
						<outline text="if (utils.endsWith (desc, &quot;&lt;/p&gt;\n&quot;)) {" created="Wed, 19 Apr 2023 02:35:25 GMT">
							<outline text="desc = utils.stringMid (desc, 1, desc.length - 5);" created="Wed, 19 Apr 2023 02:35:49 GMT"/>
							<outline text="}" created="Wed, 19 Apr 2023 02:35:45 GMT"/>
							</outline>
						<outline text="return (desc);" created="Wed, 19 Apr 2023 02:36:40 GMT"/>
						<outline text="}" created="Wed, 19 Apr 2023 02:35:22 GMT"/>
						</outline>
					<outline text="feedRead.parseUrl (config.urlLinkblogFeed, config.feedReadTimeOutSecs, function (err, theFeed) {">
						<outline text="var htmltext = &quot;&quot;;"/>
						<outline text="function add (s) {">
							<outline text="htmltext += s + &quot;\n&quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text="if (err) {">
							<outline text="console.log (&quot;getLinkblogTextForTheDay: err.message == &quot; + err.message);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="var ctitems = 0;"/>
							<outline text="theFeed.items.forEach (function (item) {">
								<outline text="if (utils.sameDay (theDay, item.pubDate)) {">
									<outline text="var pubdatestring = new Date (item.pubDate).toLocaleTimeString ();"/>
									<outline text="" created="Fri, 13 Jan 2023 13:10:13 GMT"/>
									<outline text="var link = &quot;&quot;;" created="Fri, 13 Jan 2023 13:10:13 GMT"/>
									<outline text="if (typeof item.link == &quot;string&quot;) { //1/13/23 by DW" created="Fri, 13 Jan 2023 13:10:33 GMT">
										<outline text="link = &quot;&lt;a href=\&quot;&quot; + item.link + &quot;\&quot;&gt;&quot; + getDomainFromUrl (item.link) + &quot;&lt;/a&gt;&quot;;"/>
										<outline text="}" created="Fri, 13 Jan 2023 13:10:50 GMT"/>
										</outline>
									<outline text="var link = &quot;&lt;a href=\&quot;&quot; + item.link + &quot;\&quot;&gt;&quot; + getDomainFromUrl (item.link) + &quot;&lt;/a&gt;&quot;;" isComment="true"/>
									<outline text="" created="Fri, 13 Jan 2023 13:10:14 GMT"/>
									<outline text="add (&quot;&lt;div class=\&quot;divLinkblogItem\&quot;&gt;&quot; + cleanDescription (item.description) + &quot; &quot; + link + &quot;&lt;/div&gt;&quot;); //4/18/23 by DW"/>
									<outline text="ctitems++;"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="if (ctitems &gt; 0) {">
								<outline text="htmltext = &quot;&lt;h4&gt;Linkblog items for the day.&lt;/h4&gt;&quot; + htmltext;"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="callback (htmltext);"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function readMailList (callback) {">
					<outline text="fs.readFile (config.emailPrefsFile, function (err, jsontext) {">
						<outline text="if (err) {">
							<outline text="console.log (&quot;readMailList: err.message == &quot; + err.message);"/>
							<outline text="callback (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="try {">
								<outline text="var theList = JSON.parse (jsontext);"/>
								<outline text="callback (undefined, theList);"/>
								<outline text="}"/>
								</outline>
							<outline text="catch (err) {">
								<outline text="console.log (&quot;readMailList: err.message == &quot; + err.message);"/>
								<outline text="callback (err);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function mailItem (item, flJustTest, callback) { //8/8/19 by DW ">
					<outline text="Changes" isComment="true">
						<outline text="8/30/19; 3:01:38 PM by DW">
							<outline text="Add support for emailActual property. It's the case-sensitive email address that the user submitted."/>
							</outline>
						<outline text="8/28/19; 12:37:45 PM by DW">
							<outline text="Converted to the new format emailPrefs.json file.">
								<outline text="each object in the struct is of this form">
									<outline text="email: {">
										<outline text="when"/>
										<outline text="enabled"/>
										<outline text="}"/>
										</outline>
									</outline>
								</outline>
							</outline>
						<outline text="8/20/19; 1:34:58 PM by DW">
							<outline text="Added flJustTest param, to help get us going. If true we just send to dave.winer@gmail.com, not to the whole list. So to get a test  you just have to quit and re-launch."/>
							</outline>
						</outline>
					<outline text="getLinkblogTextForTheDay (utils.dateYesterday (item.when), function (linkblogtext) {">
						<outline text="function hack (s) {">
							<outline text="const replacetable = {">
								<outline text="&quot;&lt;ul class=\&quot;ulLevel0\&quot;&gt;&quot;: &quot;&lt;div class=\&quot;ulLevel0\&quot;&gt;&quot;,"/>
								<outline text="&quot;&lt;li&quot;: &quot;&lt;div class=\&quot;divPgf\&quot;&quot;,"/>
								<outline text="&quot;&lt;/li&gt;&quot;: &quot;&lt;/div&gt;&quot;"/>
								<outline text="};"/>
								</outline>
							<outline text="s = utils.multipleReplaceAll (s, replacetable, false, &quot;&quot;, &quot;&quot;);"/>
							<outline text="return (s);"/>
							<outline text="}"/>
							</outline>
						<outline text="readMailList (function (err, theList) {">
							<outline text="if (flJustTest) { //8/20/19 by DW">
								<outline text="theList = {">
									<outline text="&quot;dave.winer@gmail.com&quot;: {">
										<outline text="&quot;when&quot;: new Date (0),"/>
										<outline text="&quot;emailActual&quot;: &quot;Dave.Winer@gmail.com&quot;,"/>
										<outline text="&quot;enabled&quot;: true"/>
										<outline text="}"/>
										</outline>
									<outline text="};"/>
									</outline>
								<outline text="theList = {" isComment="true">
									<outline text="&quot;davewiner&quot;: {">
										<outline text="&quot;email&quot;: &quot;dave.winer@gmail.com&quot;,"/>
										<outline text="&quot;enabled&quot;: true"/>
										<outline text="}"/>
										</outline>
									<outline text="};"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="if (!err) {">
								<outline text="fs.readFile (emailTemplateFile, function (err, emailTemplate) {">
									<outline text="if (!err) {">
										<outline text="for (var x in theList) {">
											<outline text="let email = x; //so it can be used in mail.send's callback"/>
											<outline text="let listitem = theList [email];"/>
											<outline text="let emailActual = (listitem.emailActual !== undefined) ? listitem.emailActual : email; //8/30/19 by DW"/>
											<outline text="if (listitem.enabled) {">
												<outline text="var params = new Object ();"/>
												<outline text="utils.copyScalars (item, params);"/>
												<outline text="params.unsubUrl = utils.replaceAll (config.emailUnsubUrl, &quot;[%email%]&quot;, emailActual); //8/27/19 by DW"/>
												<outline text="params.unsubUrl = config.emailUnsubUrl;" isComment="true"/>
												<outline text="params.readOnWebUrl = item.link;"/>
												<outline text="params.snarkySlogan = utils.getRandomSnarkySlogan (); //9/1/19 by DW"/>
												<outline text="params.howLongBlogRunning = &quot;This blog has been running for: &quot; + utils.howLongSinceStartAsString (&quot;10/7/1994, 12:00 PDT&quot;); //9/12/19 by DW"/>
												<outline text="params.whenSent = new Date ().toLocaleString ();"/>
												<outline text="params.copyright = config.emailCopyright;"/>
												<outline text="params.linkblogtext = linkblogtext; //8/23/19 by DW"/>
												<outline text="var mailtext = utils.multipleReplaceAll (emailTemplate.toString (), params, false, &quot;[%&quot;, &quot;%]&quot;);"/>
												<outline text="mail.send (emailActual, item.title, hack (mailtext), &quot;dave@scripting.com&quot;, function (err, data) {">
													<outline text="if (!err) {">
														<outline text="console.log (&quot;mailItem: mail sent to &quot; + emailActual);"/>
														<outline text="logMailSend (emailActual);"/>
														<outline text="}"/>
														</outline>
													<outline text="fs.writeFile (&quot;lastmail.html&quot;, mailtext, function (err) {">
														<outline text="});"/>
														</outline>
													<outline text="});"/>
													</outline>
												<outline text="}"/>
												</outline>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="function runningOnDesktop () {" isComment="true">
					<outline text="try {">
						<outline text="console.log (window.location.href);"/>
						<outline text="return (true);"/>
						<outline text="}"/>
						</outline>
					<outline text="catch (err) {">
						<outline text="return (false);"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function statsChanged () {">
					<outline text="flStatsChanged = true;"/>
					<outline text="}"/>
					</outline>
				<outline text="function rssChanged () {">
					<outline text="flRssChanged = true;"/>
					<outline text="flStatsChanged = true;"/>
					<outline text="}"/>
					</outline>
				<outline text="function buildRss (callback) {">
					<outline text="var headElements = {">
						<outline text="title: config.rssTitle,"/>
						<outline text="link: config.rssLink,"/>
						<outline text="description: config.rssDescription,"/>
						<outline text="language: config.rssLanguage,"/>
						<outline text="generator: config.rssGenerator,"/>
						<outline text="docs: config.rssDocs,"/>
						<outline text="maxFeedItems: config.rssMaxItems,"/>
						<outline text="appDomain: config.appDomain,"/>
						<outline text="flRssCloudEnabled:  config.flRssCloudEnabled,"/>
						<outline text="rssCloudDomain:  config.rssCloudDomain,"/>
						<outline text="rssCloudPort:  config.rssCloudPort,"/>
						<outline text="rssCloudPath: config.rssCloudPath,"/>
						<outline text="rssCloudRegisterProcedure:  config.rssCloudRegisterProcedure,"/>
						<outline text="rssCloudProtocol:  config.rssCloudProtocol"/>
						<outline text="}"/>
						</outline>
					<outline text="function writeJsonVersion (headElements, rssHistory) {">
						<outline text="var jstruct = {">
							<outline text="headElements: headElements, "/>
							<outline text="items: rssHistory"/>
							<outline text="}"/>
							</outline>
						<outline text="var jsontext = utils.jsonStringify (jstruct);"/>
						<outline text="fs.writeFile (fnameJson, jsontext, function () {">
							<outline text="});"/>
							</outline>
						<outline text="s3.newObject (config.pathDestJsonFile, jsontext, &quot;application/json&quot;, &quot;public-read&quot;, function (err, data) {">
							<outline text="if (err) {">
								<outline text="console.log (&quot;writeJsonVersion: err.message == &quot; + err.message);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="console.log (&quot;writeJsonVersion: config.pathDestJsonFile == &quot; + config.pathDestJsonFile);" isComment="true"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="var xmltext = rss.buildRssFeed (headElements, stats.rssHistory);"/>
					<outline text="fs.writeFile (fnameRss, xmltext, function () {">
						<outline text="});"/>
						</outline>
					<outline text="s3.newObject (config.pathDestRssFile, xmltext, &quot;text/xml&quot;, &quot;public-read&quot;, function (err, data) {">
						<outline text="if (err) {">
							<outline text="console.log (&quot;buildRss: err.message == &quot; + err.message);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="console.log (&quot;buildRss: config.pathDestRssFile == &quot; + config.pathDestRssFile);" isComment="true"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="writeJsonVersion (headElements, stats.rssHistory);"/>
					<outline text="if (callback !== undefined) {">
						<outline text="callback (xmltext);"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text=""/>
				<outline text=""/>
				<outline text="function checkForTheHtml (callback) {">
					<outline text="var now = new Date ();"/>
					<outline text="function getCurrentHtml (relpath, callback) {">
						<outline text="function readHtmlFromGitHub (relpath, callback) {">
							<outline text="Changes" isComment="true">
								<outline text="2/8/20; 1:23:30 PM by DW">
									<outline text="Reads a file in this form:">
										<outline text="http://scripting.com/data/pages/2020/02/05.html"/>
										</outline>
									</outline>
								</outline>
							<outline text="var theRequest = {">
								<outline text="method: &quot;GET&quot;,"/>
								<outline text="url: config.urlGitHubPath + relpath,"/>
								<outline text="headers: {">
									<outline text="&quot;User-Agent&quot;: config.userAgent"/>
									<outline text="}"/>
									</outline>
								<outline text="};"/>
								</outline>
							<outline text="request (theRequest, function (err, response, body) { ">
								<outline text="if (!err &amp;&amp; response.statusCode == 200) {">
									<outline text="callback (body.toString ());"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="callback (undefined);"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="function readHtmlFromS3 (relpath, callback) {">
							<outline text="Changes" isComment="true">
								<outline text="2/8/20; 1:23:30 PM by DW">
									<outline text="Reads a file in this form:">
										<outline text="http://scripting.com/data/pages/2020/02/05.html"/>
										</outline>
									</outline>
								</outline>
							<outline text="const url = &quot;http://scripting.com/data/pages/&quot; + relpath;"/>
							<outline text="request (url, function (err, response, htmltext) {">
								<outline text="if (!err &amp;&amp; response.statusCode == 200) {">
									<outline text="callback (htmltext);"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="callback (undefined);"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="readHtmlFromS3 (relpath, function (htmltext) {">
							<outline text="if (htmltext !== undefined) {">
								<outline text="callback (htmltext)"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="readHtmlFromGitHub (relpath, function (htmltext) {">
									<outline text="if (htmltext !== undefined) {">
										<outline text="callback (htmltext)"/>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function pushItem (title, pubDate, text) {">
						<outline text="var urlPublic = &quot;http://scripting.com/&quot; + relpath;"/>
						<outline text="var item = {">
							<outline text="title: title,"/>
							<outline text="text: text,"/>
							<outline text="when: pubDate,"/>
							<outline text="link: urlPublic,"/>
							<outline text="author: config.rssItemAuthor, //7/31/19 by DW"/>
							<outline text="guid: {">
								<outline text="flPermalink: true,"/>
								<outline text="value: urlPublic"/>
								<outline text="}"/>
								</outline>
							<outline text="};"/>
							</outline>
						<outline text="stats.rssHistory.unshift (item);"/>
						<outline text="while (stats.rssHistory.length &gt; config.rssMaxItems) {">
							<outline text="stats.rssHistory.pop ();"/>
							<outline text="}"/>
							</outline>
						<outline text="statsChanged ();"/>
						<outline text="rssChanged ();"/>
						<outline text="mailItem (item, false); //8/8/19 by DW"/>
						<outline text="}"/>
						</outline>
					<outline text="if (!utils.sameDay (now, stats.whenLastUpdate)) {">
						<outline text="var yesterday = utils.dateYesterday (now);"/>
						<outline text="var itemtitle = config.blogTitle + &quot;: &quot; + dateFormat (yesterday, &quot;dddd, mmmm d, yyyy&quot;);"/>
						<outline text="var relpath = utils.getDatePath (yesterday, false) + &quot;.html&quot;;"/>
						<outline text="function gotTheHtml (htmltext) {">
							<outline text="console.log (now.toLocaleTimeString () + &quot;: htmltext.length == &quot; + htmltext.length + &quot;\n&quot;);"/>
							<outline text="stats.whenLastUpdate = now;"/>
							<outline text="stats.ctUpdates++;"/>
							<outline text="pushItem (itemtitle, now, htmltext);"/>
							<outline text="statsChanged ();" isComment="true"/>
							<outline text="var f = config.dataFilePath + relpath;"/>
							<outline text="utils.sureFilePath (f, function () {">
								<outline text="fs.writeFile (f, htmltext, function () {">
									<outline text="});"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="getCurrentHtml (relpath, function (htmltext) {">
							<outline text="if (htmltext !== undefined) {">
								<outline text="gotTheHtml (htmltext)"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="" isComment="true"/>
						<outline text="var theRequest = {" isComment="true">
							<outline text="method: &quot;GET&quot;,"/>
							<outline text="url: config.urlGitHubPath + relpath,"/>
							<outline text="headers: {">
								<outline text="&quot;User-Agent&quot;: config.userAgent"/>
								<outline text="}"/>
								</outline>
							<outline text="};"/>
							</outline>
						<outline text="request (theRequest, function (err, response, body) { " isComment="true">
							<outline text="var htmltext = undefined;"/>
							<outline text="if (err) {">
								<outline text="console.log (&quot;checkForTheHtml: err.message == &quot; + err.message);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="if (response.statusCode == 200) {">
									<outline text="htmltext = body.toString ();"/>
									<outline text="console.log (now.toLocaleTimeString () + &quot;: htmltext.length == &quot; + htmltext.length + &quot;\n&quot;);"/>
									<outline text="stats.whenLastUpdate = now;"/>
									<outline text="stats.ctUpdates++;"/>
									<outline text="pushItem (itemtitle, now, htmltext);"/>
									<outline text="statsChanged ();" isComment="true"/>
									<outline text="var f = config.dataFilePath + relpath;"/>
									<outline text="utils.sureFilePath (f, function () {">
										<outline text="fs.writeFile (f, htmltext, function () {">
											<outline text="});"/>
											</outline>
										<outline text="});"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="if (callback !== undefined) {">
								<outline text="callback (htmltext);"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function everyHour () {">
					<outline text="var now = new Date ();"/>
					<outline text="console.log (&quot;\n&quot; + myProductName + &quot; v&quot; + myVersion + &quot;: &quot; + now.toLocaleTimeString ());"/>
					<outline text="}"/>
					</outline>
				<outline text="function everyMinute () {">
					<outline text="checkForTheHtml ();"/>
					<outline text=" var h = new Date ().getHours ();"/>
					<outline text="if (currentHour != h) {">
						<outline text="currentHour = h;"/>
						<outline text="everyHour ();"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function everySecond () {">
					<outline text="if (flStatsChanged) {">
						<outline text="flStatsChanged = false;"/>
						<outline text="stats.whenLastSave = new Date ();"/>
						<outline text="stats.ctSaves++;"/>
						<outline text="fs.writeFile (fnameStats, utils.jsonStringify (stats), function (err) {">
							<outline text="if (err) {">
								<outline text="console.log (&quot;everySecond: err.message == &quot; + err.message);"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="if (flRssChanged) {">
						<outline text="flRssChanged = false;"/>
						<outline text="buildRss ();"/>
						<outline text="}"/>
						</outline>
					<outline text="if (flMailStatsChanged) {">
						<outline text="flMailStatsChanged = false;"/>
						<outline text="mailStats.whenLastSave = new Date ();"/>
						<outline text="mailStats.ctSaves++;"/>
						<outline text="fs.writeFile (fnameMailStats, utils.jsonStringify (mailStats), function (err) {">
							<outline text="if (err) {">
								<outline text="console.log (&quot;everySecond: err.message == &quot; + err.message);"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="var yesterday = utils.dateYesterday (new Date ()); //testing -- 2/8/20 by DW" isComment="true"/>
				<outline text="var relpath = utils.getDatePath (yesterday, false) + &quot;.html&quot;;" isComment="true"/>
				<outline text="getCurrentHtml (relpath, function (htmltext) {" isComment="true">
					<outline text="console.log (htmltext.length);"/>
					<outline text="});"/>
					</outline>
				<outline text="return;" isComment="true"/>
				<outline text=""/>
				<outline text="console.log (&quot;\n&quot; + myProductName + &quot; v&quot; + myVersion + &quot;.\n&quot;);"/>
				<outline text="" isComment="true"/>
				<outline text="flRssChanged = true; //for testing" isComment="true"/>
				<outline text="" isComment="true"/>
				<outline text="function runEveryMinute (callback) { //run callback at the top of each minute, with no drift">
					<outline text="Changes" isComment="true" created="Sun, 14 Feb 2021 18:21:17 GMT">
						<outline text="2/14/21; 1:21:21 PM by DW" created="Sun, 14 Feb 2021 18:21:20 GMT">
							<outline text="For some reason, on Montana, it won't install the new version of daveutils. I wanted to get this functionality in right now. So I cribbed the code. " created="Sun, 14 Feb 2021 18:21:21 GMT"/>
							</outline>
						</outline>
					<outline text="var whenLastEveryMinute = new Date ();"/>
					<outline text="function secondsSince (when) { " created="Fri, 01 Feb 2013 22:40:26 GMT" pgfnum="18084">
						<outline text="var now = new Date ();" created="Fri, 01 Feb 2013 00:33:21 GMT" pgfnum="18031"/>
						<outline text="when = new Date (when);"/>
						<outline text="return ((now - when) / 1000);" created="Fri, 01 Feb 2013 22:41:19 GMT" pgfnum="18089"/>
						<outline text="}" created="Mon, 24 Feb 2014 15:51:02 GMT" pgfnum="37929"/>
						</outline>
					<outline text="function everySecond () {">
						<outline text="var now = new Date ();"/>
						<outline text="if (now.getSeconds () == 0) {">
							<outline text="whenLastEveryMinute = now;"/>
							<outline text="callback ();"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="if (secondsSince (whenLastEveryMinute) &gt; 60) {">
								<outline text="whenLastEveryMinute = now;"/>
								<outline text="callback ();"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="setInterval (everySecond, 1000);"/>
					<outline text="}"/>
					</outline>
				<outline text="" created="Sun, 14 Feb 2021 18:21:12 GMT"/>
				<outline text="fs.readFile (fnameMailStats, function (err, data) {">
					<outline text="if (!err) {">
						<outline text="const jstruct = JSON.parse (data);"/>
						<outline text="for (var x in jstruct) {">
							<outline text="mailStats [x] = jstruct [x];"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="fs.readFile (fnameStats, function (err, data) {">
						<outline text="if (!err) {">
							<outline text="const jstruct = JSON.parse (data);"/>
							<outline text="for (var x in jstruct) {">
								<outline text="stats [x] = jstruct [x];"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="fs.readFile (fnameConfig, function (err, data) {">
							<outline text="if (!err) {">
								<outline text="const jstruct = JSON.parse (data);"/>
								<outline text="for (var x in jstruct) {">
									<outline text="config [x] = jstruct [x];"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="mailItem (stats.rssHistory [0], true); //testing -- 8/8/19 by DW" isComment="true"/>
							<outline text="checkForTheHtml ();"/>
							<outline text="runEveryMinute (everyMinute); //2/14/21 by DW"/>
							<outline text="setInterval (everySecond, 1000); "/>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="});"/>
					</outline>
				<outline text=""/>
				<outline text=""/>
				</outline>
			<outline text="tmp/package.json">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;test&quot;,"/>
					<outline text="&quot;description&quot;: &quot;Test app for davemaillist.&quot;,"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave.winer@gmail.com&gt;&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.4.0&quot;,"/>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;daveutils&quot;: &quot;*&quot;,"/>
						<outline text="&quot;daves3&quot;: &quot;*&quot;"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="tmp/backup.js">
				<outline text="const fs = require (&quot;fs&quot;);"/>
				<outline text="const s3 = require (&quot;daves3&quot;);"/>
				<outline text="const utils = require (&quot;daveutils&quot;);"/>
				<outline text=""/>
				<outline text="fs.readFile (&quot;../../scriptingmaillist/data/emailPrefs.json&quot;, function (err, data) {">
					<outline text="var jsontext = data.toString ();"/>
					<outline text="var s3path = &quot;/scripting.com/code/davemaillist/tmp.json&quot;;"/>
					<outline text="console.log (jsontext);" isComment="true"/>
					<outline text="s3.newObject (s3path, jsontext, &quot;application/json&quot;, &quot;public-read&quot;, function (err, data) {">
						<outline text="if (err) {">
							<outline text="console.log (&quot;backup: s3path == &quot; + s3path + &quot;, err.message == &quot; + err.message);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="console.log (&quot;backup: s3path == &quot; + s3path);"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="})"/>
					</outline>
				</outline>
			</outline>
		<outline text="/scripting.com/email/">
			<outline text="code.js">
				<outline text="const urlMailListServer = &quot;http://maillist.scripting.com/&quot;;"/>
				<outline text=""/>
				<outline text="const appConsts = {" isComment="true">
					<outline text="productname: &quot;scriptingNewsPrefs&quot;,"/>
					<outline text="productnameForDisplay: &quot;Scripting Prefs&quot;,"/>
					<outline text="urlTwitterServer: &quot;http://likes.scripting.com/&quot;,"/>
					<outline text="pathAppPrefs: &quot;scriptingNewsPrefs.json&quot;,"/>
					<outline text="domain: &quot;scripting.com&quot;,"/>
					<outline text="version: &quot;0.4.0&quot;"/>
					<outline text="};"/>
					</outline>
				<outline text="var appPrefs = {" isComment="true" created="Fri, 04 Jan 2013 13:52:28 GMT" pgfnum="16628">
					<outline text="ctStartups: 0, "/>
					<outline text="whenLastStartup: new Date (0),"/>
					<outline text="ctPrefsSaves: 0,"/>
					<outline text="whenLastPrefsSave: new Date (0),"/>
					<outline text="myMailAddress: &quot;&quot;"/>
					<outline text="};" created="Fri, 04 Jan 2013 22:10:46 GMT" pgfnum="16700"/>
					</outline>
				<outline text="var myNodeStorageApp;" isComment="true"/>
				<outline text="var myUserInfo;" isComment="true"/>
				<outline text="var fnamePrefs = &quot;prefs.json&quot;;" isComment="true"/>
				<outline text="var flPrefsChanged = false;" isComment="true"/>
				<outline text=""/>
				<outline text=""/>
				<outline text="function sendConfirmingEmail (email, flSubscribe, callback) {">
					<outline text="var paramtable = {" created="Sat, 09 Aug 2014 15:42:15 GMT" pgfnum="43199">
						<outline text="email: email," created="Sat, 09 Aug 2014 15:42:28 GMT" pgfnum="43203"/>
						<outline text="urlwebapp: stringNthField (window.location.href, &quot;?&quot;, 1),"/>
						<outline text="subscribe: flSubscribe"/>
						<outline text="}" created="Sat, 09 Aug 2014 15:42:23 GMT" pgfnum="43202"/>
						</outline>
					<outline text="var url = urlMailListServer + &quot;confirmemail?&quot; + twBuildParamList (paramtable, false);" created="Sat, 09 Aug 2014 16:02:57 GMT" pgfnum="43215"/>
					<outline text="$.ajax ({">
						<outline text="type: &quot;GET&quot;,"/>
						<outline text="url: url,"/>
						<outline text="success: function (data) {">
							<outline text="callback (undefined, data);"/>
							<outline text="},"/>
							</outline>
						<outline text="error: function (status, something, otherthing) { ">
							<outline text="var err = JSON.parse (status.responseText);"/>
							<outline text="console.log (&quot;sendConfirmingEmail: err == &quot; + jsonStringify (err));" created="Wed, 12 Jun 2013 13:14:10 GMT" pgfnum="25848"/>
							<outline text="callback (err);"/>
							<outline text="},"/>
							</outline>
						<outline text="dataType: &quot;json&quot;"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function twConfirmEmail (email, callback) { //8/16/19 by DW" isComment="true">
					<outline text="var paramtable = {" created="Sat, 09 Aug 2014 15:42:15 GMT" pgfnum="43199">
						<outline text="oauth_token: localStorage.twOauthToken," created="Sat, 09 Aug 2014 15:42:28 GMT" pgfnum="43203"/>
						<outline text="oauth_token_secret: localStorage.twOauthTokenSecret," created="Sat, 09 Aug 2014 15:42:43 GMT" pgfnum="43205"/>
						<outline text="email: email," created="Sat, 09 Aug 2014 15:43:02 GMT" pgfnum="43206"/>
						<outline text="urlwebapp: stringNthField (window.location.href, &quot;?&quot;, 1)"/>
						<outline text="}" created="Sat, 09 Aug 2014 15:42:23 GMT" pgfnum="43202"/>
						</outline>
					<outline text="var url = twGetDefaultServer () + &quot;confirmemail?&quot; + twBuildParamList (paramtable);" created="Sat, 09 Aug 2014 16:02:57 GMT" pgfnum="43215"/>
					<outline text="$.ajax ({">
						<outline text="type: &quot;GET&quot;,"/>
						<outline text="url: url,"/>
						<outline text="success: function (data) {">
							<outline text="callback (undefined, data);"/>
							<outline text="},"/>
							</outline>
						<outline text="error: function (status, something, otherthing) { ">
							<outline text="var err = JSON.parse (status.responseText);"/>
							<outline text="console.log (&quot;twConfirmEmail: err == &quot; + JSON.stringify (err, undefined, 4));" created="Wed, 12 Jun 2013 13:14:10 GMT" pgfnum="25848"/>
							<outline text="callback (err);"/>
							<outline text="},"/>
							</outline>
						<outline text="dataType: &quot;json&quot;"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="function confirmEmailCode (theCode, callback) {">
					<outline text="var paramtable = {" created="Sat, 09 Aug 2014 15:42:15 GMT" pgfnum="43199">
						<outline text="code: theCode" created="Sat, 09 Aug 2014 15:43:02 GMT" pgfnum="43206"/>
						<outline text="}" created="Sat, 09 Aug 2014 15:42:23 GMT" pgfnum="43202"/>
						</outline>
					<outline text="var url = urlMailListServer + &quot;confirmemailcode?&quot; + twBuildParamList (paramtable);" created="Sat, 09 Aug 2014 16:02:57 GMT" pgfnum="43215"/>
					<outline text="$.ajax ({">
						<outline text="type: &quot;GET&quot;,"/>
						<outline text="url: url,"/>
						<outline text="success: function (data) {">
							<outline text="callback (undefined, data);"/>
							<outline text="},"/>
							</outline>
						<outline text="error: function (status, something, otherthing) { ">
							<outline text="var err = JSON.parse (status.responseText);"/>
							<outline text="console.log (&quot;confirmEmailCode: err == &quot; + jsonStringify (err));" created="Wed, 12 Jun 2013 13:14:10 GMT" pgfnum="25848"/>
							<outline text="callback (err);"/>
							<outline text="},"/>
							</outline>
						<outline text="dataType: &quot;json&quot;"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function twConfirmCode (theCode, callback) { //8/16/19 by DW" isComment="true">
					<outline text="var paramtable = {" created="Sat, 09 Aug 2014 15:42:15 GMT" pgfnum="43199">
						<outline text="oauth_token: localStorage.twOauthToken," created="Sat, 09 Aug 2014 15:42:28 GMT" pgfnum="43203"/>
						<outline text="oauth_token_secret: localStorage.twOauthTokenSecret," created="Sat, 09 Aug 2014 15:42:43 GMT" pgfnum="43205"/>
						<outline text="code: theCode" created="Sat, 09 Aug 2014 15:43:02 GMT" pgfnum="43206"/>
						<outline text="}" created="Sat, 09 Aug 2014 15:42:23 GMT" pgfnum="43202"/>
						</outline>
					<outline text="var url = twGetDefaultServer () + &quot;confirmemailcode?&quot; + twBuildParamList (paramtable);" created="Sat, 09 Aug 2014 16:02:57 GMT" pgfnum="43215"/>
					<outline text="$.ajax ({">
						<outline text="type: &quot;GET&quot;,"/>
						<outline text="url: url,"/>
						<outline text="success: function (data) {">
							<outline text="callback (undefined, data);"/>
							<outline text="},"/>
							</outline>
						<outline text="error: function (status, something, otherthing) { ">
							<outline text="var err = JSON.parse (status.responseText);"/>
							<outline text="console.log (&quot;twConfirmCode: err == &quot; + JSON.stringify (err, undefined, 4));" created="Wed, 12 Jun 2013 13:14:10 GMT" pgfnum="25848"/>
							<outline text="callback (err);"/>
							<outline text="},"/>
							</outline>
						<outline text="dataType: &quot;json&quot;"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text=""/>
				<outline text=""/>
				<outline text="function twUnsub (callback) { //8/20/19 by DW" isComment="true">
					<outline text="var paramtable = {" created="Sat, 09 Aug 2014 15:42:15 GMT" pgfnum="43199">
						<outline text="oauth_token: localStorage.twOauthToken," created="Sat, 09 Aug 2014 15:42:28 GMT" pgfnum="43203"/>
						<outline text="oauth_token_secret: localStorage.twOauthTokenSecret" created="Sat, 09 Aug 2014 15:42:43 GMT" pgfnum="43205"/>
						<outline text="}" created="Sat, 09 Aug 2014 15:42:23 GMT" pgfnum="43202"/>
						</outline>
					<outline text="var url = twGetDefaultServer () + &quot;emailunsub?&quot; + twBuildParamList (paramtable);" created="Sat, 09 Aug 2014 16:02:57 GMT" pgfnum="43215"/>
					<outline text="$.ajax ({">
						<outline text="type: &quot;GET&quot;,"/>
						<outline text="url: url,"/>
						<outline text="success: function (data) {">
							<outline text="callback (undefined, data);"/>
							<outline text="},"/>
							</outline>
						<outline text="error: function (status, something, otherthing) { ">
							<outline text="var err = JSON.parse (status.responseText);"/>
							<outline text="console.log (&quot;twConfirmCode: err == &quot; + JSON.stringify (err, undefined, 4));" created="Wed, 12 Jun 2013 13:14:10 GMT" pgfnum="25848"/>
							<outline text="callback (err);"/>
							<outline text="},"/>
							</outline>
						<outline text="dataType: &quot;json&quot;"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function confirmButtonClick () {">
					<outline text="var emailAddress = $(&quot;#idEmailAddress&quot;).val ();"/>
					<outline text="console.log (&quot;confirmButtonClick: emailAddress == &quot; + emailAddress);"/>
					<outline text="appPrefs.myMailAddress = emailAddress;" isComment="true"/>
					<outline text="prefsChanged ();" isComment="true"/>
					<outline text="sendConfirmingEmail (emailAddress, true, function (err, data) {">
						<outline text="var theAlert;"/>
						<outline text="if (err) {">
							<outline text="theAlert = &quot;Couldn't send the confirmation because there was an error: &quot; + err.message;"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="theAlert = &quot;A confirmation email has been sent.&quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text="alertDialog (theAlert);"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function getURLParameter (name) {">
					<outline text="return (decodeURI ((RegExp(name + '=' + '(.+?)(&amp;|$)').exec(location.search)||[,null])[1]));"/>
					<outline text="}" created="Thu, 24 Apr 2014 00:54:02 GMT" pgfnum="40519"/>
					</outline>
				<outline text="function checkEmailConfirmParams () {">
					<outline text="var theCode = getURLParameter (&quot;emailConfirmCode&quot;);"/>
					<outline text="if (theCode != &quot;null&quot;) {">
						<outline text="console.log (&quot;checkEmailConfirmParams: theCode == &quot; + theCode);"/>
						<outline text="confirmEmailCode (theCode, function (err, data) {">
							<outline text="var theAlert;"/>
							<outline text="if (err) {">
								<outline text="theAlert = &quot;Couldn't confirm the subscription because there was an error: &quot; + err.message;"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="if (data.flSub) {">
									<outline text="theAlert = &quot;Thanks for subscribing!&quot;;"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="theAlert = &quot;Unsubscribed.&quot;;"/>
									<outline text="}"/>
									</outline>
								<outline text="alert (&quot;checkEmailConfirmParams: data == &quot; + jsonStringify (data));" isComment="true"/>
								<outline text="theAlert = &quot;Subscription confirmed. We will send email updates to &quot; + data.email + &quot;. There will be a link at the end of each email that unsubscribes.&quot;;" isComment="true"/>
								<outline text="}"/>
								</outline>
							<outline text="alertDialog (theAlert, function () {">
								<outline text="window.location.href = &quot;http://scripting.com/&quot;; //redirect"/>
								<outline text="window.location.href = stringNthField (window.location.href, &quot;?&quot;, 1); //redirect" isComment="true"/>
								<outline text="});"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function checkEmailUnsub () { ">
					<outline text="var unsub = getURLParameter (&quot;unsub&quot;);"/>
					<outline text="if (unsub == &quot;true&quot;) {">
						<outline text="var emailAddress = getURLParameter (&quot;email&quot;);"/>
						<outline text="if (emailAddress != &quot;null&quot;) {">
							<outline text="sendConfirmingEmail (emailAddress, false, function (err, data) {">
								<outline text="var theAlert;"/>
								<outline text="if (err) {">
									<outline text="theAlert = &quot;Couldn't send the confirmation because there was an error: &quot; + err.message;"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="theAlert = &quot;A confirmation email has been sent.&quot;;"/>
									<outline text="}"/>
									</outline>
								<outline text="alertDialog (theAlert);"/>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="confirmDialog (&quot;Click OK to unsubscribe from the Scripting News overnight email.&quot;, function () {" isComment="true">
							<outline text="twUnsub (function (err, data) {">
								<outline text="if (err) {">
									<outline text="alertDialog (err.message);"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="alertDialog (&quot;You are now unsubscribed. Have a nice day! :-)&quot;);"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function getPrefsFromServer (callback) {">
					<outline text="twGetFile (fnamePrefs, true, true, function (err, data) {">
						<outline text="if (!err) {">
							<outline text="var jstruct = JSON.parse (data.filedata);"/>
							<outline text="for (var x in jstruct) {">
								<outline text="appPrefs [x] = jstruct [x];"/>
								<outline text="}"/>
								</outline>
							<outline text="console.log (&quot;getPrefsFromServer: appPrefs == &quot; + jsonStringify (appPrefs));"/>
							<outline text="}"/>
							</outline>
						<outline text="if (callback !== undefined) {">
							<outline text="callback ();"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function savePrefsOnServer (callback) {">
					<outline text="appPrefs.ctPrefsSaves++;"/>
					<outline text="appPrefs.whenLastPrefsSave = new Date ();"/>
					<outline text="twUploadFile (fnamePrefs, jsonStringify (appPrefs), &quot;application/json&quot;, true, function (data) {">
						<outline text="if (callback !== undefined) {">
							<outline text="callback ();"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="function connectToTwitter () {">
					<outline text="twConnectToTwitter ();" created="Thu, 13 Jun 2013 23:05:41 GMT" pgfnum="26122"/>
					<outline text="}"/>
					</outline>
				<outline text="function prefsChanged () {">
					<outline text="flPrefsChanged = true;"/>
					<outline text="}"/>
					</outline>
				<outline text="function everySecond () {">
					<outline text="if (flPrefsChanged) {">
						<outline text="flPrefsChanged = false;"/>
						<outline text="savePrefsOnServer ();"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function startup () {">
					<outline text="console.log (&quot;startup&quot;);"/>
					<outline text="checkEmailConfirmParams (); //redirects if they're there -- 8/17/19 by DW"/>
					<outline text="checkEmailUnsub (); //8/20/19 by DW"/>
					<outline text=""/>
					<outline text=""/>
					<outline text=""/>
					<outline text=""/>
					<outline text=""/>
					<outline text="twStorageData.urlTwitterServer = appConsts.urlTwitterServer;" isComment="true"/>
					<outline text="twGetOauthParams ();" isComment="true"/>
					<outline text="if (twIsTwitterConnected ()) {" isComment="true">
						<outline text="$(&quot;#idIfConnected&quot;).css (&quot;display&quot;, &quot;block&quot;);"/>
						<outline text="twGetUserInfo (twGetScreenName (), function (userInfo) {">
							<outline text="myUserInfo = userInfo;"/>
							<outline text="});"/>
							</outline>
						<outline text="twGetTwitterConfig (function () { //twStorageData.twitterConfig will have information from twitter.com">
							<outline text="});"/>
							</outline>
						<outline text="getPrefsFromServer (function () {">
							<outline text="appPrefs.ctStartups++;"/>
							<outline text="appPrefs.whenLastStartup = new Date ();"/>
							<outline text="savePrefsOnServer ();"/>
							<outline text="checkEmailConfirmParams (); //redirects if they're there -- 8/17/19 by DW"/>
							<outline text="checkEmailUnsub (); //8/20/19 by DW"/>
							<outline text="$(&quot;#idEmailAddress&quot;).val (appPrefs.myMailAddress);"/>
							<outline text="self.setInterval (everySecond, 1000); "/>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="else {" isComment="true">
						<outline text="$(&quot;#idIfNotConnected&quot;).css (&quot;display&quot;, &quot;block&quot;);"/>
						<outline text="}"/>
						</outline>
					<outline text="hitCounter (); " isComment="true"/>
					<outline text="initGoogleAnalytics (); " isComment="true"/>
					<outline text="myNodeStorageApp = new nodeStorageApp (appConsts, appPrefs);" isComment="true"/>
					<outline text="myNodeStorageApp.everySecond = function () {" isComment="true">
						<outline text="};"/>
						</outline>
					<outline text="myNodeStorageApp.start (function (flConnected) {" isComment="true">
						<outline text="if (flConnected) {">
							<outline text="appPrefs.ctStartups++;"/>
							<outline text="prefsChanged ();"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="showHideItemsThatRequireLogin ();" isComment="true"/>
							<outline text="initTwitterMenuItems ();" isComment="true"/>
							<outline text="}"/>
							</outline>
						<outline text="initGoogleAnalytics (); "/>
						<outline text="hitCounter (); "/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="styles.css">
				<outline text="@import url('https://fonts.googleapis.com/css?family=Oswald:400,700');"/>
				<outline text=""/>
				<outline text="body {">
					<outline text="font-family: Ubuntu;"/>
					<outline text="font-size: 18px;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divPageBody {">
					<outline text="width: 50%;"/>
					<outline text="margin-top: 200px;"/>
					<outline text="margin-left: auto;"/>
					<outline text="margin-right: auto;"/>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text=".divHowLong, p {">
					<outline text="font-size: 18px;"/>
					<outline text="line-height: 140%;"/>
					<outline text="margin-bottom: 10px;"/>
					<outline text="}"/>
					</outline>
				<outline text=".emailInput {">
					<outline text="margin-top: 10px !important;"/>
					<outline text="font-size: 18px !important;"/>
					<outline text="padding: 3px !important; "/>
					<outline text="height: 32px !important; "/>
					<outline text="width: 400px !important;"/>
					<outline text="}"/>
					</outline>
				<outline text=".btnConfirm {">
					<outline text="height: 28px;"/>
					<outline text="margin-left: 8px;"/>
					<outline text="}"/>
					</outline>
				<outline text="td {">
					<outline text="vertical-align: middle;"/>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="/* styles for phone */" created="Sun, 09 Mar 2014 19:11:13 GMT" pgfnum="38719">
					<outline text="@media only screen "/>
					<outline text="and (min-device-width : 320px) "/>
					<outline text="and (max-device-width : 480px) {">
						<outline text="body {">
							<outline text="font-size: 16px;"/>
							<outline text="}"/>
							</outline>
						<outline text=".divPageBody {">
							<outline text="width: 90%;"/>
							<outline text="margin-left: auto;"/>
							<outline text="margin-right: auto;"/>
							<outline text="margin-top: 90px;"/>
							<outline text="}"/>
							</outline>
						<outline text="table {">
							<outline text="width: 95%;"/>
							<outline text="}"/>
							</outline>
						<outline text=".emailInput {">
							<outline text="width: 100% !important;"/>
							<outline text="}"/>
							</outline>
						<outline text=".modal {">
							<outline text="width: 95% !important;"/>
							<outline text="left: 70% !important;"/>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/* styles for tablet */">
					<outline text="@media only screen and (min-device-width: 768px) and (max-device-width: 1024px) {">
						<outline text=".divPageBody {">
							<outline text="width: 75%;"/>
							<outline text="margin-left: auto;"/>
							<outline text="margin-right: auto;"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					</outline>
				</outline>
			<outline text="index.html">
				<outline text="&lt;html&gt;">
					<outline text="&lt;head&gt;">
						<outline text="&lt;title&gt;Scripting News email&lt;/title&gt;"/>
						<outline text="&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;"/>
						<outline text="&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;"/>
						<outline text="&lt;%basicIncludes2%&gt;"/>
						<outline text="&lt;script src=&quot;http://fargo.io/code/storage/api.js&quot;&gt;&lt;/script&gt;" created="Thu, 08 May 2014 14:04:18 GMT" pgfnum="41269"/>
						<outline text="&lt;script src=&quot;code.js&quot;&gt;&lt;/script&gt;" created="Thu, 08 May 2014 14:04:18 GMT" pgfnum="41269"/>
						<outline text="&lt;link href=&quot;styles.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;"/>
						<outline text="&lt;!-- Facebook metadata --&gt;">
							<outline text="&lt;meta property=&quot;og:url&quot; content=&quot;http://scripting.com/email/&quot; /&gt;"/>
							<outline text="&lt;meta property=&quot;og:type&quot; content=&quot;website&quot; /&gt;"/>
							<outline text="&lt;meta property=&quot;og:title&quot; content=&quot;Scripting News email&quot; /&gt;"/>
							<outline text="&lt;meta property=&quot;og:description&quot; content=&quot;Every night at midnight an email goes to subscribers with the posts from scripting.com from the previous day. One email per day.&quot; /&gt;"/>
							<outline text="&lt;meta property=&quot;og:image&quot; content=&quot;http://scripting.com/images/2019/08/21/kingKong.png&quot; /&gt;"/>
							<outline text="&lt;meta property=&quot;og:site_name&quot; content=&quot;Scripting News&quot; /&gt;"/>
							</outline>
						<outline text="&lt;!-- Twitter metadata --&gt;">
							<outline text="&lt;meta name=&quot;twitter:card&quot; content=&quot;summary_large_image&quot;&gt;"/>
							<outline text="&lt;meta name=&quot;twitter:site&quot; content=&quot;@davewiner&quot;&gt;"/>
							<outline text="&lt;meta name=&quot;twitter:title&quot; content=&quot;Scripting News email&quot;&gt;"/>
							<outline text="&lt;meta name=&quot;twitter:description&quot; content=&quot;Every night at midnight an email goes to subscribers with the posts from scripting.com from the previous day. One email per day.&quot;&gt;"/>
							<outline text="&lt;meta name=&quot;twitter:image:src&quot; content=&quot;http://scripting.com/images/2019/08/21/kingKong.png&quot;&gt;"/>
							</outline>
						<outline text="&lt;/head&gt;"/>
						</outline>
					<outline text="&lt;body&gt;">
						<outline text="&lt;div class=&quot;divPageBody&quot;&gt;">
							<outline text="&lt;h3&gt;Scripting News email&lt;/h3&gt;"/>
							<outline text="&lt;p&gt;Enter your email address below and we'll send a confirming email.&lt;/p&gt;"/>
							<outline text="&lt;table&gt;">
								<outline text="&lt;tr&gt;">
									<outline text="&lt;td&gt;">
										<outline text="&lt;input class=&quot;xlarge emailInput&quot; id=&quot;idEmailAddress&quot; size=&quot;80&quot; type=&quot;text&quot; value=&quot;&quot; placeholder=&quot;&quot;&gt;"/>
										<outline text="&lt;/td&gt;"/>
										</outline>
									<outline text="&lt;td&gt;">
										<outline text="&lt;input class=&quot;btn btn-primary btnConfirm&quot; type=&quot;button&quot; value=&quot;Confirm&quot; onclick=&quot;confirmButtonClick ();&quot;&gt;" created="Tue, 06 May 2014 16:58:36 GMT" pgfnum="41161"/>
										<outline text="&lt;/td&gt;"/>
										</outline>
									<outline text="&lt;/tr&gt;"/>
									</outline>
								<outline text="&lt;/table&gt;"/>
								</outline>
							<outline text="&lt;/div&gt;"/>
							</outline>
						<outline text="&lt;script&gt;">
							<outline text="$(document).ready (function () {">
								<outline text="startup ();" created="Wed, 30 Oct 2013 15:20:06 GMT" pgfnum="30656"/>
								<outline text="});"/>
								</outline>
							<outline text="&lt;/script&gt;"/>
							</outline>
						<outline text="&lt;/body&gt;"/>
						</outline>
					<outline text="&lt;/html&gt;"/>
					</outline>
				</outline>
			</outline>
		<outline text="allservers:maine:pagepark:domains:subscribe.scripting.com:" isComment="true">
			<outline text="code.js">
				<outline text="const urlMailListServer = &quot;http://maillist.scripting.com/&quot;;"/>
				<outline text="const urlReadFileApi = &quot;https://httpproxy.scripting.com/httpReadUrl&quot;; //8/12/24 by DW" created="Thu, 27 Feb 2014 15:33:29 GMT" pgfnum="38051"/>
				<outline text=""/>
				<outline text="readHttpFileThruProxy" isComment="true"/>
				<outline text="readHttpFileThruProxy (urlArtJson, undefined, function (jsontext) {">
					<outline text="if (jsontext !== undefined) {">
						<outline text="artLibrary = JSON.parse (jsontext);"/>
						<outline text="if (callback !== undefined) {">
							<outline text="callback ();"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="});"/>
					</outline>
				<outline text="" created="Mon, 12 Aug 2024 15:38:40 GMT"/>
				<outline text="const appConsts = {" isComment="true">
					<outline text="productname: &quot;scriptingNewsPrefs&quot;,"/>
					<outline text="productnameForDisplay: &quot;Scripting Prefs&quot;,"/>
					<outline text="urlTwitterServer: &quot;http://likes.scripting.com/&quot;,"/>
					<outline text="pathAppPrefs: &quot;scriptingNewsPrefs.json&quot;,"/>
					<outline text="domain: &quot;scripting.com&quot;,"/>
					<outline text="version: &quot;0.4.0&quot;"/>
					<outline text="};"/>
					</outline>
				<outline text="var appPrefs = {" isComment="true" created="Fri, 04 Jan 2013 13:52:28 GMT" pgfnum="16628">
					<outline text="ctStartups: 0, "/>
					<outline text="whenLastStartup: new Date (0),"/>
					<outline text="ctPrefsSaves: 0,"/>
					<outline text="whenLastPrefsSave: new Date (0),"/>
					<outline text="myMailAddress: &quot;&quot;"/>
					<outline text="};" created="Fri, 04 Jan 2013 22:10:46 GMT" pgfnum="16700"/>
					</outline>
				<outline text="var myNodeStorageApp;" isComment="true"/>
				<outline text="var myUserInfo;" isComment="true"/>
				<outline text="var fnamePrefs = &quot;prefs.json&quot;;" isComment="true"/>
				<outline text="var flPrefsChanged = false;" isComment="true"/>
				<outline text=""/>
				<outline text=""/>
				<outline text="function sendConfirmingEmail (email, flSubscribe, callback) {">
					<outline text="var paramtable = {" created="Sat, 09 Aug 2014 15:42:15 GMT" pgfnum="43199">
						<outline text="email: email," created="Sat, 09 Aug 2014 15:42:28 GMT" pgfnum="43203"/>
						<outline text="urlwebapp: stringNthField (window.location.href, &quot;?&quot;, 1),"/>
						<outline text="subscribe: flSubscribe"/>
						<outline text="}" created="Sat, 09 Aug 2014 15:42:23 GMT" pgfnum="43202"/>
						</outline>
					<outline text="var url = urlMailListServer + &quot;confirmemail?&quot; + twBuildParamList (paramtable, false);" created="Sat, 09 Aug 2014 16:02:57 GMT" pgfnum="43215"/>
					<outline text="$.ajax ({">
						<outline text="type: &quot;GET&quot;,"/>
						<outline text="url: url,"/>
						<outline text="success: function (data) {">
							<outline text="callback (undefined, data);"/>
							<outline text="},"/>
							</outline>
						<outline text="error: function (status, something, otherthing) { ">
							<outline text="var err = JSON.parse (status.responseText);"/>
							<outline text="console.log (&quot;sendConfirmingEmail: err == &quot; + jsonStringify (err));" created="Wed, 12 Jun 2013 13:14:10 GMT" pgfnum="25848"/>
							<outline text="callback (err);"/>
							<outline text="},"/>
							</outline>
						<outline text="dataType: &quot;json&quot;"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function twConfirmEmail (email, callback) { //8/16/19 by DW" isComment="true">
					<outline text="var paramtable = {" created="Sat, 09 Aug 2014 15:42:15 GMT" pgfnum="43199">
						<outline text="oauth_token: localStorage.twOauthToken," created="Sat, 09 Aug 2014 15:42:28 GMT" pgfnum="43203"/>
						<outline text="oauth_token_secret: localStorage.twOauthTokenSecret," created="Sat, 09 Aug 2014 15:42:43 GMT" pgfnum="43205"/>
						<outline text="email: email," created="Sat, 09 Aug 2014 15:43:02 GMT" pgfnum="43206"/>
						<outline text="urlwebapp: stringNthField (window.location.href, &quot;?&quot;, 1)"/>
						<outline text="}" created="Sat, 09 Aug 2014 15:42:23 GMT" pgfnum="43202"/>
						</outline>
					<outline text="var url = twGetDefaultServer () + &quot;confirmemail?&quot; + twBuildParamList (paramtable);" created="Sat, 09 Aug 2014 16:02:57 GMT" pgfnum="43215"/>
					<outline text="$.ajax ({">
						<outline text="type: &quot;GET&quot;,"/>
						<outline text="url: url,"/>
						<outline text="success: function (data) {">
							<outline text="callback (undefined, data);"/>
							<outline text="},"/>
							</outline>
						<outline text="error: function (status, something, otherthing) { ">
							<outline text="var err = JSON.parse (status.responseText);"/>
							<outline text="console.log (&quot;twConfirmEmail: err == &quot; + JSON.stringify (err, undefined, 4));" created="Wed, 12 Jun 2013 13:14:10 GMT" pgfnum="25848"/>
							<outline text="callback (err);"/>
							<outline text="},"/>
							</outline>
						<outline text="dataType: &quot;json&quot;"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="function confirmEmailCode (theCode, callback) {">
					<outline text="var paramtable = {" created="Sat, 09 Aug 2014 15:42:15 GMT" pgfnum="43199">
						<outline text="code: theCode" created="Sat, 09 Aug 2014 15:43:02 GMT" pgfnum="43206"/>
						<outline text="}" created="Sat, 09 Aug 2014 15:42:23 GMT" pgfnum="43202"/>
						</outline>
					<outline text="var url = urlMailListServer + &quot;confirmemailcode?&quot; + twBuildParamList (paramtable);" created="Sat, 09 Aug 2014 16:02:57 GMT" pgfnum="43215"/>
					<outline text="$.ajax ({">
						<outline text="type: &quot;GET&quot;,"/>
						<outline text="url: url,"/>
						<outline text="success: function (data) {">
							<outline text="callback (undefined, data);"/>
							<outline text="},"/>
							</outline>
						<outline text="error: function (status, something, otherthing) { ">
							<outline text="var err = JSON.parse (status.responseText);"/>
							<outline text="console.log (&quot;confirmEmailCode: err == &quot; + jsonStringify (err));" created="Wed, 12 Jun 2013 13:14:10 GMT" pgfnum="25848"/>
							<outline text="callback (err);"/>
							<outline text="},"/>
							</outline>
						<outline text="dataType: &quot;json&quot;"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function twConfirmCode (theCode, callback) { //8/16/19 by DW" isComment="true">
					<outline text="var paramtable = {" created="Sat, 09 Aug 2014 15:42:15 GMT" pgfnum="43199">
						<outline text="oauth_token: localStorage.twOauthToken," created="Sat, 09 Aug 2014 15:42:28 GMT" pgfnum="43203"/>
						<outline text="oauth_token_secret: localStorage.twOauthTokenSecret," created="Sat, 09 Aug 2014 15:42:43 GMT" pgfnum="43205"/>
						<outline text="code: theCode" created="Sat, 09 Aug 2014 15:43:02 GMT" pgfnum="43206"/>
						<outline text="}" created="Sat, 09 Aug 2014 15:42:23 GMT" pgfnum="43202"/>
						</outline>
					<outline text="var url = twGetDefaultServer () + &quot;confirmemailcode?&quot; + twBuildParamList (paramtable);" created="Sat, 09 Aug 2014 16:02:57 GMT" pgfnum="43215"/>
					<outline text="$.ajax ({">
						<outline text="type: &quot;GET&quot;,"/>
						<outline text="url: url,"/>
						<outline text="success: function (data) {">
							<outline text="callback (undefined, data);"/>
							<outline text="},"/>
							</outline>
						<outline text="error: function (status, something, otherthing) { ">
							<outline text="var err = JSON.parse (status.responseText);"/>
							<outline text="console.log (&quot;twConfirmCode: err == &quot; + JSON.stringify (err, undefined, 4));" created="Wed, 12 Jun 2013 13:14:10 GMT" pgfnum="25848"/>
							<outline text="callback (err);"/>
							<outline text="},"/>
							</outline>
						<outline text="dataType: &quot;json&quot;"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text=""/>
				<outline text=""/>
				<outline text="function twUnsub (callback) { //8/20/19 by DW" isComment="true">
					<outline text="var paramtable = {" created="Sat, 09 Aug 2014 15:42:15 GMT" pgfnum="43199">
						<outline text="oauth_token: localStorage.twOauthToken," created="Sat, 09 Aug 2014 15:42:28 GMT" pgfnum="43203"/>
						<outline text="oauth_token_secret: localStorage.twOauthTokenSecret" created="Sat, 09 Aug 2014 15:42:43 GMT" pgfnum="43205"/>
						<outline text="}" created="Sat, 09 Aug 2014 15:42:23 GMT" pgfnum="43202"/>
						</outline>
					<outline text="var url = twGetDefaultServer () + &quot;emailunsub?&quot; + twBuildParamList (paramtable);" created="Sat, 09 Aug 2014 16:02:57 GMT" pgfnum="43215"/>
					<outline text="$.ajax ({">
						<outline text="type: &quot;GET&quot;,"/>
						<outline text="url: url,"/>
						<outline text="success: function (data) {">
							<outline text="callback (undefined, data);"/>
							<outline text="},"/>
							</outline>
						<outline text="error: function (status, something, otherthing) { ">
							<outline text="var err = JSON.parse (status.responseText);"/>
							<outline text="console.log (&quot;twConfirmCode: err == &quot; + JSON.stringify (err, undefined, 4));" created="Wed, 12 Jun 2013 13:14:10 GMT" pgfnum="25848"/>
							<outline text="callback (err);"/>
							<outline text="},"/>
							</outline>
						<outline text="dataType: &quot;json&quot;"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function confirmButtonClick () {">
					<outline text="var emailAddress = $(&quot;#idEmailAddress&quot;).val ();"/>
					<outline text="console.log (&quot;confirmButtonClick: emailAddress == &quot; + emailAddress);"/>
					<outline text="appPrefs.myMailAddress = emailAddress;" isComment="true"/>
					<outline text="prefsChanged ();" isComment="true"/>
					<outline text="sendConfirmingEmail (emailAddress, true, function (err, data) {">
						<outline text="var theAlert;"/>
						<outline text="if (err) {">
							<outline text="theAlert = &quot;Couldn't send the confirmation because there was an error: &quot; + err.message;"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="theAlert = &quot;A confirmation email has been sent.&quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text="alertDialog (theAlert);"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function getURLParameter (name) {">
					<outline text="return (decodeURI ((RegExp(name + '=' + '(.+?)(&amp;|$)').exec(location.search)||[,null])[1]));"/>
					<outline text="}" created="Thu, 24 Apr 2014 00:54:02 GMT" pgfnum="40519"/>
					</outline>
				<outline text="function checkEmailConfirmParams () {">
					<outline text="var theCode = getURLParameter (&quot;emailConfirmCode&quot;);"/>
					<outline text="if (theCode != &quot;null&quot;) {">
						<outline text="console.log (&quot;checkEmailConfirmParams: theCode == &quot; + theCode);"/>
						<outline text="confirmEmailCode (theCode, function (err, data) {">
							<outline text="var theAlert;"/>
							<outline text="if (err) {">
								<outline text="theAlert = &quot;Couldn't confirm the subscription because there was an error: &quot; + err.message;"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="if (data.flSub) {">
									<outline text="theAlert = &quot;Thanks for subscribing!&quot;;"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="theAlert = &quot;Unsubscribed.&quot;;"/>
									<outline text="}"/>
									</outline>
								<outline text="alert (&quot;checkEmailConfirmParams: data == &quot; + jsonStringify (data));" isComment="true"/>
								<outline text="theAlert = &quot;Subscription confirmed. We will send email updates to &quot; + data.email + &quot;. There will be a link at the end of each email that unsubscribes.&quot;;" isComment="true"/>
								<outline text="}"/>
								</outline>
							<outline text="alertDialog (theAlert, function () {">
								<outline text="window.location.href = &quot;http://scripting.com/&quot;; //redirect"/>
								<outline text="window.location.href = stringNthField (window.location.href, &quot;?&quot;, 1); //redirect" isComment="true"/>
								<outline text="});"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function checkEmailUnsub () { ">
					<outline text="var unsub = getURLParameter (&quot;unsub&quot;);"/>
					<outline text="if (unsub == &quot;true&quot;) {">
						<outline text="var emailAddress = getURLParameter (&quot;email&quot;);"/>
						<outline text="if (emailAddress != &quot;null&quot;) {">
							<outline text="sendConfirmingEmail (emailAddress, false, function (err, data) {">
								<outline text="var theAlert;"/>
								<outline text="if (err) {">
									<outline text="theAlert = &quot;Couldn't send the confirmation because there was an error: &quot; + err.message;"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="theAlert = &quot;A confirmation email has been sent.&quot;;"/>
									<outline text="}"/>
									</outline>
								<outline text="alertDialog (theAlert);"/>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="confirmDialog (&quot;Click OK to unsubscribe from the Scripting News overnight email.&quot;, function () {" isComment="true">
							<outline text="twUnsub (function (err, data) {">
								<outline text="if (err) {">
									<outline text="alertDialog (err.message);"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="alertDialog (&quot;You are now unsubscribed. Have a nice day! :-)&quot;);"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function getPrefsFromServer (callback) {">
					<outline text="twGetFile (fnamePrefs, true, true, function (err, data) {">
						<outline text="if (!err) {">
							<outline text="var jstruct = JSON.parse (data.filedata);"/>
							<outline text="for (var x in jstruct) {">
								<outline text="appPrefs [x] = jstruct [x];"/>
								<outline text="}"/>
								</outline>
							<outline text="console.log (&quot;getPrefsFromServer: appPrefs == &quot; + jsonStringify (appPrefs));"/>
							<outline text="}"/>
							</outline>
						<outline text="if (callback !== undefined) {">
							<outline text="callback ();"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function savePrefsOnServer (callback) {">
					<outline text="appPrefs.ctPrefsSaves++;"/>
					<outline text="appPrefs.whenLastPrefsSave = new Date ();"/>
					<outline text="twUploadFile (fnamePrefs, jsonStringify (appPrefs), &quot;application/json&quot;, true, function (data) {">
						<outline text="if (callback !== undefined) {">
							<outline text="callback ();"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="function connectToTwitter () {">
					<outline text="twConnectToTwitter ();" created="Thu, 13 Jun 2013 23:05:41 GMT" pgfnum="26122"/>
					<outline text="}"/>
					</outline>
				<outline text="function prefsChanged () {">
					<outline text="flPrefsChanged = true;"/>
					<outline text="}"/>
					</outline>
				<outline text="function everySecond () {">
					<outline text="if (flPrefsChanged) {">
						<outline text="flPrefsChanged = false;"/>
						<outline text="savePrefsOnServer ();"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function startup () {">
					<outline text="console.log (&quot;startup&quot;);"/>
					<outline text="checkEmailConfirmParams (); //redirects if they're there -- 8/17/19 by DW"/>
					<outline text="checkEmailUnsub (); //8/20/19 by DW"/>
					<outline text=""/>
					<outline text=""/>
					<outline text=""/>
					<outline text=""/>
					<outline text=""/>
					<outline text="twStorageData.urlTwitterServer = appConsts.urlTwitterServer;" isComment="true"/>
					<outline text="twGetOauthParams ();" isComment="true"/>
					<outline text="if (twIsTwitterConnected ()) {" isComment="true">
						<outline text="$(&quot;#idIfConnected&quot;).css (&quot;display&quot;, &quot;block&quot;);"/>
						<outline text="twGetUserInfo (twGetScreenName (), function (userInfo) {">
							<outline text="myUserInfo = userInfo;"/>
							<outline text="});"/>
							</outline>
						<outline text="twGetTwitterConfig (function () { //twStorageData.twitterConfig will have information from twitter.com">
							<outline text="});"/>
							</outline>
						<outline text="getPrefsFromServer (function () {">
							<outline text="appPrefs.ctStartups++;"/>
							<outline text="appPrefs.whenLastStartup = new Date ();"/>
							<outline text="savePrefsOnServer ();"/>
							<outline text="checkEmailConfirmParams (); //redirects if they're there -- 8/17/19 by DW"/>
							<outline text="checkEmailUnsub (); //8/20/19 by DW"/>
							<outline text="$(&quot;#idEmailAddress&quot;).val (appPrefs.myMailAddress);"/>
							<outline text="self.setInterval (everySecond, 1000); "/>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="else {" isComment="true">
						<outline text="$(&quot;#idIfNotConnected&quot;).css (&quot;display&quot;, &quot;block&quot;);"/>
						<outline text="}"/>
						</outline>
					<outline text="hitCounter (); " isComment="true"/>
					<outline text="initGoogleAnalytics (); " isComment="true"/>
					<outline text="myNodeStorageApp = new nodeStorageApp (appConsts, appPrefs);" isComment="true"/>
					<outline text="myNodeStorageApp.everySecond = function () {" isComment="true">
						<outline text="};"/>
						</outline>
					<outline text="myNodeStorageApp.start (function (flConnected) {" isComment="true">
						<outline text="if (flConnected) {">
							<outline text="appPrefs.ctStartups++;"/>
							<outline text="prefsChanged ();"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="showHideItemsThatRequireLogin ();" isComment="true"/>
							<outline text="initTwitterMenuItems ();" isComment="true"/>
							<outline text="}"/>
							</outline>
						<outline text="initGoogleAnalytics (); "/>
						<outline text="hitCounter (); "/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="styles.css">
				<outline text="@import url('https://fonts.googleapis.com/css?family=Oswald:400,700');"/>
				<outline text=""/>
				<outline text="body {">
					<outline text="font-family: Ubuntu;"/>
					<outline text="font-size: 18px;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divPageBody {">
					<outline text="width: 50%;"/>
					<outline text="margin-top: 200px;"/>
					<outline text="margin-left: auto;"/>
					<outline text="margin-right: auto;"/>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text=".divHowLong, p {">
					<outline text="font-size: 18px;"/>
					<outline text="line-height: 140%;"/>
					<outline text="margin-bottom: 10px;"/>
					<outline text="}"/>
					</outline>
				<outline text=".emailInput {">
					<outline text="margin-top: 10px !important;"/>
					<outline text="font-size: 18px !important;"/>
					<outline text="padding: 3px !important; "/>
					<outline text="height: 32px !important; "/>
					<outline text="width: 400px !important;"/>
					<outline text="}"/>
					</outline>
				<outline text=".btnConfirm {">
					<outline text="height: 28px;"/>
					<outline text="margin-left: 8px;"/>
					<outline text="}"/>
					</outline>
				<outline text="td {">
					<outline text="vertical-align: middle;"/>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="/* styles for phone */" created="Sun, 09 Mar 2014 19:11:13 GMT" pgfnum="38719">
					<outline text="@media only screen "/>
					<outline text="and (min-device-width : 320px) "/>
					<outline text="and (max-device-width : 480px) {">
						<outline text="body {">
							<outline text="font-size: 16px;"/>
							<outline text="}"/>
							</outline>
						<outline text=".divPageBody {">
							<outline text="width: 90%;"/>
							<outline text="margin-left: auto;"/>
							<outline text="margin-right: auto;"/>
							<outline text="margin-top: 90px;"/>
							<outline text="}"/>
							</outline>
						<outline text="table {">
							<outline text="width: 95%;"/>
							<outline text="}"/>
							</outline>
						<outline text=".emailInput {">
							<outline text="width: 100% !important;"/>
							<outline text="}"/>
							</outline>
						<outline text=".modal {">
							<outline text="width: 95% !important;"/>
							<outline text="left: 70% !important;"/>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="/* styles for tablet */">
					<outline text="@media only screen and (min-device-width: 768px) and (max-device-width: 1024px) {">
						<outline text=".divPageBody {">
							<outline text="width: 75%;"/>
							<outline text="margin-left: auto;"/>
							<outline text="margin-right: auto;"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					</outline>
				</outline>
			<outline text="index.html">
				<outline text="&lt;html&gt;">
					<outline text="&lt;head&gt;">
						<outline text="&lt;title&gt;Scripting News email&lt;/title&gt;"/>
						<outline text="&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;"/>
						<outline text="&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;"/>
						<outline text="&lt;%basicIncludes2%&gt;"/>
						<outline text="&lt;script src=&quot;//s3.amazonaws.com//fargo.io/code/storage/api.js&quot;&gt;&lt;/script&gt;" created="Thu, 08 May 2014 14:04:18 GMT" pgfnum="41269"/>
						<outline text="&lt;script src=&quot;code.js&quot;&gt;&lt;/script&gt;" created="Thu, 08 May 2014 14:04:18 GMT" pgfnum="41269"/>
						<outline text="&lt;link href=&quot;styles.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;"/>
						<outline text="&lt;!-- Facebook metadata --&gt;">
							<outline text="&lt;meta property=&quot;og:url&quot; content=&quot;http://scripting.com/email/&quot; /&gt;"/>
							<outline text="&lt;meta property=&quot;og:type&quot; content=&quot;website&quot; /&gt;"/>
							<outline text="&lt;meta property=&quot;og:title&quot; content=&quot;Scripting News email&quot; /&gt;"/>
							<outline text="&lt;meta property=&quot;og:description&quot; content=&quot;Every night at midnight an email goes to subscribers with the posts from scripting.com from the previous day. One email per day.&quot; /&gt;"/>
							<outline text="&lt;meta property=&quot;og:image&quot; content=&quot;http://scripting.com/images/2019/08/21/kingKong.png&quot; /&gt;"/>
							<outline text="&lt;meta property=&quot;og:site_name&quot; content=&quot;Scripting News&quot; /&gt;"/>
							</outline>
						<outline text="&lt;!-- Twitter metadata --&gt;">
							<outline text="&lt;meta name=&quot;twitter:card&quot; content=&quot;summary_large_image&quot;&gt;"/>
							<outline text="&lt;meta name=&quot;twitter:site&quot; content=&quot;@davewiner&quot;&gt;"/>
							<outline text="&lt;meta name=&quot;twitter:title&quot; content=&quot;Scripting News email&quot;&gt;"/>
							<outline text="&lt;meta name=&quot;twitter:description&quot; content=&quot;Every night at midnight an email goes to subscribers with the posts from scripting.com from the previous day. One email per day.&quot;&gt;"/>
							<outline text="&lt;meta name=&quot;twitter:image:src&quot; content=&quot;http://scripting.com/images/2019/08/21/kingKong.png&quot;&gt;"/>
							</outline>
						<outline text="&lt;/head&gt;"/>
						</outline>
					<outline text="&lt;body&gt;">
						<outline text="&lt;div class=&quot;divPageBody&quot;&gt;">
							<outline text="&lt;h3&gt;Scripting News email&lt;/h3&gt;"/>
							<outline text="&lt;p&gt;Enter your email address below and we'll send a confirming email.&lt;/p&gt;"/>
							<outline text="&lt;table&gt;">
								<outline text="&lt;tr&gt;">
									<outline text="&lt;td&gt;">
										<outline text="&lt;input class=&quot;xlarge emailInput&quot; id=&quot;idEmailAddress&quot; size=&quot;80&quot; type=&quot;text&quot; value=&quot;&quot; placeholder=&quot;&quot;&gt;"/>
										<outline text="&lt;/td&gt;"/>
										</outline>
									<outline text="&lt;td&gt;">
										<outline text="&lt;input class=&quot;btn btn-primary btnConfirm&quot; type=&quot;button&quot; value=&quot;Confirm&quot; onclick=&quot;confirmButtonClick ();&quot;&gt;" created="Tue, 06 May 2014 16:58:36 GMT" pgfnum="41161"/>
										<outline text="&lt;/td&gt;"/>
										</outline>
									<outline text="&lt;/tr&gt;"/>
									</outline>
								<outline text="&lt;/table&gt;"/>
								</outline>
							<outline text="&lt;/div&gt;"/>
							</outline>
						<outline text="&lt;script&gt;">
							<outline text="$(document).ready (function () {">
								<outline text="startup ();" created="Wed, 30 Oct 2013 15:20:06 GMT" pgfnum="30656"/>
								<outline text="});"/>
								</outline>
							<outline text="&lt;/script&gt;"/>
							</outline>
						<outline text="&lt;/body&gt;"/>
						</outline>
					<outline text="&lt;/html&gt;"/>
					</outline>
				</outline>
			</outline>
		<outline text="/scripting.com/email/testing/">
			<outline text="code.js">
				<outline text=""/>
				</outline>
			<outline text="styles.css">
				<outline text="body {">
					<outline text="font-family: Ubuntu;"/>
					<outline text="font-size: 18px;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divPageBody {">
					<outline text="width: 50%;"/>
					<outline text="margin-top: 200px;"/>
					<outline text="margin-left: auto;"/>
					<outline text="margin-right: auto;"/>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="index.html">
				<outline text="&lt;html&gt;">
					<outline text="&lt;head&gt;">
						<outline text="&lt;title&gt;The test is over&lt;/title&gt;"/>
						<outline text="&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;"/>
						<outline text="&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;"/>
						<outline text="&lt;%basicIncludes2%&gt;"/>
						<outline text="&lt;script src=&quot;code.js&quot;&gt;&lt;/script&gt;" created="Thu, 08 May 2014 14:04:18 GMT" pgfnum="41269"/>
						<outline text="&lt;link href=&quot;styles.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;"/>
						<outline text="&lt;/head&gt;"/>
						</outline>
					<outline text="&lt;body&gt;">
						<outline text="&lt;div class=&quot;divPageBody&quot;&gt;">
							<outline text="&lt;h3&gt;The test is over&lt;/h3&gt;"/>
							<outline text="&lt;p&gt;Thank you very much for participating in the test.&lt;/p&gt;&lt;p&gt;We're now ready to deploy.&lt;/p&gt;"/>
							<outline text="&lt;p&gt;If you want to subscribe to Scripting News nightly email for real, go to &lt;a href=&quot;http://scripting.com/email/&quot;&gt;this page&lt;/a&gt;. &lt;i&gt;Still diggin!&lt;/i&gt;&lt;/p&gt;"/>
							<outline text="&lt;/div&gt;"/>
							</outline>
						<outline text="&lt;/body&gt;"/>
						</outline>
					<outline text="&lt;/html&gt;"/>
					</outline>
				</outline>
			</outline>
		<outline text="build script">
			<outline text="nodeEditorSuite.utilities.buildScriptingNightlyEmail ()"/>
			</outline>
		</body>
	</opml>
